#!/bin/bash
# surrogate
# loren carvalho, 2012

cd
set -u
count=0

# empty vars on initial call, can reuse init() if needed
init() {
	type=""
	digest=""
	promote=""
}

rebuild_configs_for_instance() {
	instance=$1
	echo "REBUILDING CONFIGS FOR $instance"
	mysql_data_path="$original_data_path/$instance"
	backup_directory="$original_backup_dir/$instance"
	mysql_collapse_path="$original_collapse_path/$instance"
	mysql_sanity_path="$original_sanity_path/$instance"
	inc_backup_path="$backup_directory/$today/inc_$now"
	last_backup=`tail -n1 $backup_directory/.digest`
	digest="$backup_directory/.digest"
}

usage() { 
cat <<-EOF
	usage: $0 options

	This script must be run with sudo or as root, 
  it also expects some arguments, please oblige!

	OPTIONS:

	-h	Shows this message
	-b	Backup, either incremental or full, 
      "surrogate -b full", "surrogate -b inc", or "surrogate -b dump" for mysqldump
	-r 	Restore using default digest location (only for backups made using full or inc.)
	-c 	Restore, accepts a file containing a list of directories to restore.
	
EOF
exit 1
}

determine_full_backup_path(){
if [ `date +%d` == $monthly_backup ]; then
	full_backup_path="$backup_directory/monthly/${type}_$now"
elif [ `date +%a` == $weekly_backup ]; then
	full_backup_path="$backup_directory/weekly/${type}_$now"
else
	full_backup_path="$backup_directory/daily/${type}_$now"
fi
}

catch() {
	if [ $? -eq 0 ]; then
		echo "OK"
		if [ $# -eq 1 ]; then
			echo $surr_success_msg > $1
		fi
	else
		echo "Something went wrong, aborting"
		if [ $# -eq 1 ]; then
			echo $surr_fail_msg > $1
		fi
		exit 1
	fi
}

update_vars() {
	# read configs
	source /etc/surrogate/surrogate.conf
	source /etc/surrogate/xtrabackup.conf
	source $my_root/lib/rotate
}

# if there is no input, barf
test $# -ge 1 || usage
# make sure ran as root and check prereqs
test `whoami` == "root" || { echo "Need to run as root!"; exit 1; }
{ which innobackupex && which rsync; } &>/dev/null || { echo "Make sure you have rsync and percona-xtrabackup installed."; exit 1; }

update_vars
init

# get input
while getopts "hb:rc:" option 
do
  case $option in
  h)
	usage
  ;;
  b)
	# Only rotate when backing up.
	$auto_rotate && rotate_backups
	type=$OPTARG
	if [[ "$type" == "full" ]]; then
		source $my_root/lib/full
	elif [[ "$type" == "inc" ]]; then
		source $my_root/lib/inc
	elif [[ "$type" == "dump" ]]; then
	      source $my_root/lib/dump	
	else
		echo "Please specify full or incremental"
		usage
	fi
  ;;
  r)
	source $my_root/lib/restore
  ;;
  c)
	digest=$OPTARG
	source $my_root/lib/restore
  ;;
  esac
done

count=`echo $mysql_instances | wc -w`

# Check vars & perform the loaded action
if [ $count -gt 1 ]; then
  original_data_path=$mysql_data_path
  original_backup_dir=$backup_directory
  original_collapse_path=$mysql_collapse_path
  original_sanity_path=$mysql_sanity_path

  for instance in $mysql_instances; do
    echo "Processing instance: $instance"
    rebuild_configs_for_instance $instance
    perform_action $instance
  done
else
  socket=$mysql_socket
  perform_action $mysql_instances
fi

# fin
